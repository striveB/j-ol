{
  "compilerOptions": {
    /* 访问 https://aka.ms/tsconfig 以了解有关此文件的更多信息 */

    /* 项目 */
    // "incremental": true,                              /* 保存 .tsbuildinfo 文件，以允许项目的增量编译。 */
    // "composite": true,                                /* 启用约束，允许 TypeScript 项目与项目引用一起使用。 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 指定 .tsbuildinfo 增量编译文件的路径。 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 在引用组合项目时，禁用优先使用源文件而不是声明文件。 */
    // "disableSolutionSearching": true,                 /* 在编辑时，使项目退出多项目引用检查。 */
    // "disableReferencedProjectLoad": true,             /* 减少 TypeScript 自动加载的项目数量。 */

    /* 语言和环境 */
    "target": "es2016",                                  /* 设置生成的 JavaScript 的 JavaScript 语言版本，并包含兼容的库声明。 */
    // "lib": [],                                        /* 指定一组捆绑的库声明文件，这些文件描述了目标运行时环境。 */
    // "jsx": "preserve",                                /* 指定生成的 JSX 代码。 */
    // "experimentalDecorators": true,                   /* 启用对旧版实验性装饰器的实验性支持。 */
    // "emitDecoratorMetadata": true,                    /* 在源文件中为装饰的声明发出设计类型元数据。 */
    // "jsxFactory": "",                                 /* 指定在针对 React JSX 输出时使用的 JSX 工厂函数，例如 'React.createElement' 或 'h'。 */
    // "jsxFragmentFactory": "",                         /* 指定在针对 React JSX 输出时用于片段的 JSX 片段引用，例如 'React.Fragment' 或 'Fragment'。 */
    // "jsxImportSource": "",                            /* 指定在使用 'jsx: react-jsx*' 时导入 JSX 工厂函数时使用的模块标识符。 */
    // "reactNamespace": "",                             /* 指定用于 'createElement' 的对象。这仅适用于针对 'react' JSX 输出时。 */
    // "noLib": true,                                    /* 禁用包括任何库文件，包括默认的 lib.d.ts。 */
    // "useDefineForClassFields": true,                  /* 发出符合 ECMAScript 标准的类字段。 */
    // "moduleDetection": "auto",                        /* 控制用于检测模块格式 JS 文件的方法。 */

    /* 模块 */
    "module": "commonjs",                                /* 指定生成的模块代码。 */
    // "rootDir": "./",                                  /* 指定源文件的根文件夹。 */
    // "moduleResolution": "node10",                     /* 指定 TypeScript 如何根据给定的模块标识符查找文件。 */
    // "baseUrl": "./",                                  /* 指定解析非相对模块名称的基本目录。 */
    // "paths": {},                                      /* 指定一组条目，这些条目将导入重新映射到其他查找位置。 */
    // "rootDirs": [],                                   /* 在解析模块时，允许将多个文件夹视为一个文件夹。 */
    // "typeRoots": [],                                  /* 指定多个文件夹，这些文件夹的作用类似于 './node_modules/@types'。 */
    // "types": [],                                      /* 指定要包含的类型包名称，而无需在源文件中引用它们。 */
    // "allowUmdGlobalAccess": true,                     /* 允许从模块中访问 UMD 全局变量。 */
    // "moduleSuffixes": [],                             /* 解析模块时要搜索的文件名后缀列表。 */
    // "allowImportingTsExtensions": true,               /* 允许导入包含 TypeScript 文件扩展名的文件。需要设置 '--moduleResolution bundler' 和 '--noEmit' 或 '--emitDeclarationOnly' 之一。 */
    // "rewriteRelativeImportExtensions": true,          /* 在输出文件中，将相对导入路径中的 '.ts'、'.tsx'、'.mts' 和 '.cts' 文件扩展名重写为它们的 JavaScript 等效项。 */
    // "resolvePackageJsonExports": true,                /* 在解析包导入时使用 package.json 的 'exports' 字段。 */
    // "resolvePackageJsonImports": true,                /* 在解析导入时使用 package.json 的 'imports' 字段。 */
    // "customConditions": [],                           /* 在解析导入时，除了解析器特定的默认值外，还要设置的其他条件。 */
    // "noUncheckedSideEffectImports": true,             /* 检查具有副作用的导入。 */
    // "resolveJsonModule": true,                        /* 启用导入 .json 文件。 */
    // "allowArbitraryExtensions": true,                 /* 启用导入具有任何扩展名的文件（前提是存在声明文件）。 */
    // "noResolve": true,                                /* 禁止通过 'import'、'require' 或 '<reference>' 扩展 TypeScript 应添加到项目中的文件数量。 */

    /* JavaScript 支持 */
    // "allowJs": true,                                  /* 允许 JavaScript 文件成为程序的一部分。使用 'checkJS' 选项从这些文件中获取错误。 */
    // "checkJs": true,                                  /* 在类型检查的 JavaScript 文件中启用错误报告。 */
    // "maxNodeModuleJsDepth": 1,                        /* 指定从 'node_modules' 检查 JavaScript 文件的最大文件夹深度。仅适用于 'allowJs'。 */

    /* 发出 */
    // "declaration": true,                              /* 从项目中的 TypeScript 和 JavaScript 文件中生成 .d.ts 文件。 */
    // "declarationMap": true,                           /* 为 d.ts 文件创建源代码映射。 */
    // "emitDeclarationOnly": true,                      /* 仅输出 d.ts 文件，不输出 JavaScript 文件。 */
    // "sourceMap": true,                                /* 为发出的 JavaScript 文件创建源代码映射文件。 */
    // "inlineSourceMap": true,                          /* 在发出的 JavaScript 中包含源代码映射文件。 */
    // "noEmit": true,                                   /* 禁用从编译中发出文件。 */
    // "outFile": "./",                                  /* 指定一个文件，将所有输出捆绑到一个 JavaScript 文件中。如果 'declaration' 为 true，还指定一个文件，将所有 .d.ts 输出捆绑到该文件中。 */
    // "outDir": "./",                                   /* 指定所有发出文件的输出文件夹。 */
    // "removeComments": true,                           /* 禁用发出注释。 */
    // "importHelpers": true,                            /* 允许从 tslib 中导入辅助函数，每个项目一次，而不是在每个文件中都包含它们。 */
    // "downlevelIteration": true,                       /* 发出更兼容但冗长且性能较低的 JavaScript，用于迭代。 */
    // "sourceRoot": "",                                 /* 指定调试器查找引用源代码的根路径。 */
    // "mapRoot": "",                                    /* 指定调试器应定位映射文件的位置，而不是生成的位置。 */
    // "inlineSources": true,                            /* 在发出的 JavaScript 中的源代码映射中包含源代码。 */
    // "emitBOM": true,                                  /* 在输出文件的开头发出 UTF-8 字节顺序标记 (BOM)。 */
    // "newLine": "crlf",                                /* 设置发出文件时使用的换行符。 */
    // "stripInternal": true,                            /* 禁用发出在 JSDoc 注释中具有 '@internal' 的声明。 */
    // "noEmitHelpers": true,                            /* 禁用在编译输出中生成自定义辅助函数，如 '__extends'。 */
    // "noEmitOnError": true,                            /* 如果有任何类型检查错误，则禁用发出文件。 */
    // "preserveConstEnums": true,                       /* 禁用在生成的代码中擦除 'const enum' 声明。 */
    // "declarationDir": "./",                           /* 指定生成的声明文件的输出目录。 */

    /* 互操作性约束 */
    // "isolatedModules": true,                          /* 确保每个文件都可以安全地编译，而不依赖于其他导入。 */
    // "verbatimModuleSyntax": true,                     /* 不转换或省略未标记为仅类型的任何导入或导出，确保它们以基于 'module' 设置的输出文件格式写入。 */
    // "isolatedDeclarations": true,                     /* 要求导出上有足够的注释，以便其他工具可以轻松生成声明文件。 */
    // "allowSyntheticDefaultImports": true,             /* 当模块没有默认导出时，允许使用 'import x from y'。 */
    "esModuleInterop": true,                             /* 发出额外的 JavaScript 以简化对导入 CommonJS 模块的支持。这启用了类型兼容性方面的 'allowSyntheticDefaultImports'。 */
    // "preserveSymlinks": true,                         /* 禁用将符号链接解析为其真实路径。这与 node 中的相同标志相关。 */
    "forceConsistentCasingInFileNames": true,            /* 确保导入中的大小写正确。 */

    /* 类型检查 */
    "strict": true,                                      /* 启用所有严格类型检查选项。 */
    // "noImplicitAny": true,                            /* 启用对具有隐式 'any' 类型的表达式和声明的错误报告。 */
    // "strictNullChecks": true,                         /* 在类型检查时，考虑 'null' 和 'undefined'。 */
    // "strictFunctionTypes": true,                      /* 在分配函数时，检查以确保参数和返回值是子类型兼容的。 */
    // "strictBindCallApply": true,                      /* 检查 'bind'、'call' 和 'apply' 方法的参数是否与原始函数匹配。 */
    // "strictPropertyInitialization": true,             /* 检查类中已声明但未在构造函数中设置的属性。 */
    // "strictBuiltinIteratorReturn": true,              /* 内置迭代器使用 'undefined' 类型的 'TReturn' 而不是 'any' 进行实例化。 */
    // "noImplicitThis": true,                           /* 当 'this' 被赋予类型 'any' 时，启用错误报告。 */
    // "useUnknownInCatchVariables": true,               /* 默认将 catch 子句变量作为 'unknown' 而不是 'any'。 */
    // "alwaysStrict": true,                             /* 确保始终发出 'use strict'。 */
    // "noUnusedLocals": true,                           /* 当局部变量未被读取时，启用错误报告。 */
    // "noUnusedParameters": true,                       /* 当函数参数未被读取时，引发错误。 */
    // "exactOptionalPropertyTypes": true,               /* 按原样解释可选属性类型，而不是添加 'undefined'。 */
    // "noImplicitReturns": true,                        /* 为在函数中未显式返回的代码路径启用错误报告。 */
    // "noFallthroughCasesInSwitch": true,               /* 为 switch 语句中的贯穿案例启用错误报告。 */
    // "noUncheckedIndexedAccess": true,                 /* 在使用索引访问时，向类型添加 'undefined'。 */
    // "noImplicitOverride": true,                       /* 确保派生类中的重写成员已使用 override 修饰符标记。 */
    // "noPropertyAccessFromIndexSignature": true,       /* 强制使用索引访问器访问使用索引类型声明的键。 */
    // "allowUnusedLabels": true,                        /* 禁用对未使用标签的错误报告。 */
    // "allowUnreachableCode": true,                     /* 禁用对不可达代码的错误报告。 */

    /* 完整性 */
    // "skipDefaultLibCheck": true,                      /* 跳过对随 TypeScript 一起包含的 .d.ts 文件的类型检查。 */
    "skipLibCheck": true                                 /* 跳过对所有 .d.ts 文件的类型检查。 */
  }
}